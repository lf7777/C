1.指针
语言里，变量存放在内存中，而内存其实就是一组有序字节组成的数组，每个字节有唯一的内存地址。CPU 通过内存寻址对存储在内存中的某个指定数据对象的地址进行定位。这里，数据对象是指存储在内存中的一个指定数据类型的数值或字符串，它们都有一个自己的地址，而指针便是保存这个地址的变量。
也就是说：指针是一种保存变量地址的变量。

2.内存
内存是cpu和硬盘之间的缓冲区
内存分配有三种方式

(1):从静态存储区分配 : 全局区(静态区)(static) --初始化的全局变量和静态变量在一块区域，未初始化的全局变量和未初始化的静态变量在相邻的另一块区域，程序结束后由系统释放。

(2).在栈上分配 : 由编译器自动分配和释放的，即在执行函数时，函数内局部变量的存储单元都可以在栈上创建，函数执行结束时这些存储单元将被自动释放。需要注意的是:栈内存的分配运算内置于处理器的指令集中，它的运行效率一般很高，但是分配的内存容量有限。

(3).从堆上分配 : 也叫动态内存分配，它是由程序员手动完成申请和释放的。即程序在运行的时候由程序员使用内存分配函数(如 malloc 函数:动态分配内存)，来申请任意多少的内存，使用完之后再由程序员自己负责使用内存释放函数 free() (free:暂且理解为释放内存，指针一定要立刻赋予null?),也就是说，动态内存的整个生存期是由程序员自己决定的，使用非常灵活。需要注意的是，如果在堆上分配了内存空间，就必须及时释放它，否则将会导致运行的程序出现内存泄露等错误。



内存划分的几个区 :
系统内核 : 后期

栈区(栈)(stack) : 参考2中(2)
由编译器自动分配释放，存放函数的参数值，局部变量的值等。

全局区(静态区) : 参考静态存储分配中2中(1)。

堆区(堆)(heap) : 参考堆上分配2中(3)
是一种特殊的完全二叉树，由程序员分配释放，若程序员不释放，程序结束时可能由os回收。注意它与数据结构中的堆是两回事，分配方式倒是类似于链表。

文字常量区(数据段) : 常量字符串就是放在这里的，程序结束后由系统释放。

程序代码区(代码段) : 存放函数体的二进制代码。




堆和栈的区别 :

堆是由低地址向高地址扩展，栈是由高地址向低地址扩展。

堆中内存需要手动申请和手动释放，栈中内存由OS自动申请，自动释放，存放着参数局部变量等内存。

堆中频繁调动malloc和free，会产生内存碎片，降低程序效率。栈采用先进后出原则，不会产生内存碎片。

堆的分配效率较低，栈的分配效率较高。

栈的效率更高的原因：

栈是操作系统提供的数据结构，计算机底层对栈提供了一系列支持：分配专门的寄存器存储栈的地址，压栈和入栈有专门的指令执行；而堆是由c/c++函数库提供的，需要一些列来分配内存合并内存和释放内存的算法，因此效率较低。

