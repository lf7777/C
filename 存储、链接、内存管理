1.作用域 :
块作用域 : 花括号内，形参也在这个函数体这个块中
函数作用域 : 仅用于 goto 语句，后期再看
函数原型作用域 : 范围是从形参定义处到原型声明结束。
文件作用域 : 变量的定义在函数外面，具有外部链接文件作用域，这样的变量可用于多个函数，文件作用域也被称为全局变量。

2.链接 : 
外部链接 : main 函数之前，在文件作用域内。
内部链接 : 变量只能在一个翻译单元中使用，static 修饰的。
无链接 : 具有块作用域、函数作用域、函数原型作用域的变量都是无链接变量，意味着这些变量属于定义它们的块、函数或原型私有。

.作用域和链接描述了标识符的可见性。


3.存储期 :
描述了通过这些标识符访问的对象的生存期。

静态存储期 : 在程序的执行期间一直存在，文件作用域变量都具有静态存储期

线程存储期 : 用于并发程序设计，程序可被分为多个线程，具有线程存储期的对象，从被声明时到线程结束一直存在。以关键字 _Thread_local 声明一个对象时，每个线程都获得该变量的私有备份。

自动存储期间 : 块作用域的变量通常都具有 自动存储期。当程序进入这些变量的块时，为这些变量分配内存；当退出这个块时，释放刚才为变量分配的内存。这种做法相当于把自动变量占用的内存视为一个可重复使用的工作区或暂存区。例如，一个函数调用结束后，其变量占用的内存可用于储存下一个被调用函数的变量。
块作用域的变量也能具有静态存储期，要把变量声明在块中，且声明前加上关键字 static 

重点 : !!!!!!!!!!!!!
int main ()
{
    static int ct =0;            相当于定义一个内部全局变量.
}
这里，变量储存在静态内存中，它从程序被载入到程序结束期间都存在。但是它的作用域定义在 main 函数中，只有在执行该函数时，程序才能使用 ct 访问它所制定的对象（但是，该函数可以给其他函数提供存储区的地址以便访问该对象，例如通过指针形参或返回值）
我的理解 : 通过不用在定义新的变量占用新的内存地址，只需通过调用指针，访问该地址


